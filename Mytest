import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.Properties;

public class SftpUploadAscii {

    public static void main(String[] args) {
        // Replace these with your actual SFTP details and file path
        String sftpHost = "your.mainframe.host.com"; // Mainframe host
        String sftpUsername = "your-username"; // SFTP username
        String sftpPassword = "your-password"; // SFTP password
        String localFilePath = "path/to/your/local/formatted_file.txt"; // Local file to upload
        String remoteFilePath = "/path/on/mainframe/file.txt"; // Remote path on mainframe

        try {
            uploadFileAsAscii(sftpHost, sftpUsername, sftpPassword, localFilePath, remoteFilePath);
            System.out.println("File uploaded successfully in ASCII mode.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void uploadFileAsAscii(String host, String username, String password, String localFilePath, String remoteFilePath) throws Exception {
        // Create a new session
        JSch jsch = new JSch();
        Session session = jsch.getSession(username, host, 22);
        session.setPassword(password);

        // Configure the session for no host key checking
        Properties config = new Properties();
        config.put("StrictHostKeyChecking", "no");
        session.setConfig(config);
        session.connect();

        // Open the SFTP channel
        ChannelSftp channelSftp = (ChannelSftp) session.openChannel("sftp");
        channelSftp.connect();

        // Read the local file and upload it in ASCII mode
        try (BufferedReader reader = new BufferedReader(new FileReader(localFilePath))) {
            StringBuilder sb = new StringBuilder();
            String line;

            // Read the file line by line and convert to ASCII format with CRLF line endings
            while ((line = reader.readLine()) != null) {
                sb.append(line).append("\r\n"); // Append CRLF for Windows compatibility
            }

            // Convert the StringBuilder content to a byte array in ASCII
            byte[] asciiBytes = sb.toString().getBytes(StandardCharsets.US_ASCII);

            // Upload the file using ASCII transfer mode
            try (InputStream inputStream = new ByteArrayInputStream(asciiBytes)) {
                channelSftp.put(inputStream, remoteFilePath, ChannelSftp.OVERWRITE); // Use OVERWRITE mode
            }
        }

        // Close the SFTP channel and session
        channelSftp.disconnect();
        session.disconnect();
    }
}
