public class SeleniumAdapter implements CheckProvider {

    private final SeleniumProperties seleniumProperties;
    private final SeleniumChecksFactory seleniumChecksFactory;
    private final WebDriverProvider webDriverProvider;

    public SeleniumAdapter(SeleniumProperties seleniumProperties, SeleniumChecksFactory seleniumChecksFactory, WebDriverProvider webDriverProvider) {
        this.seleniumProperties = seleniumProperties;
        this.seleniumChecksFactory = seleniumChecksFactory;
        this.webDriverProvider = webDriverProvider;
    }

    public Map<String, String> performChecks(String trigram) {
        Map<String, String> response = new HashMap<>();
        Path downloadDir = createOrCleanKycDirectory();

        WebDriver driver = null;
        try {
            driver = getWebDriver(downloadDir, trigram);
            SeleniumChecks seleniumChecks = getSeleniumChecksByTrigram(trigram);

            if (seleniumChecks != null) {
                seleniumChecks.performSanityChecks(driver, response, downloadDir);
            }
        } catch (Exception e) {
            log.error(e.getMessage(), e);
        } finally {
            if (driver != null) {
                driver.quit();
            }
        }

        return response;
    }

    private WebDriver getWebDriver(Path downloadDir, String trigram) {
        String appUrl = seleniumProperties.getUrl(trigram);
        WebDriver webDriver = webDriverProvider.getWebDriver(downloadDir, trigram);
        webDriver.navigate().to(appUrl);
        connectToApplication(webDriver, trigram);
        return webDriver;
    }

    private SeleniumChecks getSeleniumChecksByTrigram(String trigram) {
        String appName = seleniumProperties.getAppName(trigram);
        return seleniumChecksFactory.getSeleniumChecks(appName);
    }

    private void connectToApplication(WebDriver driver, String trigram) {
        addUserName(driver, trigram);
        addPassword(driver, trigram);

        if (SeleniumUtil.isElementPresent(driver, By.cssSelector("[data-cy=\"submit\"]"))) {
            WebElement submitElement = driver.findElement(By.cssSelector("[data-cy=\"submit\"]"));
            submitElement.click();
        }
    }

    private void addUserName(WebDriver driver, String trigram) {
        String username = seleniumProperties.getUsername(trigram);
        WebDriverWait waitForUserName = new WebDriverWait(driver, Duration.ofSeconds(30));
        if (SeleniumUtil.isElementPresentWithWait(waitForUserName, By.cssSelector("[data-cy=\"email\"]"))) {
            WebElement email = driver.findElement(By.cssSelector("[data-cy=\"email\"]"));
            email.sendKeys(username);
        }
    }

    private void addPassword(WebDriver driver, String trigram) {
        String password = seleniumProperties.getPassword(trigram);
        if (SeleniumUtil.isElementPresent(driver, By.cssSelector("[data-cy=\"password\"]"))) {
            WebElement passwordElement = driver.findElement(By.cssSelector("[data-cy=\"password\"]"));
            passwordElement.sendKeys(password);
        }
    }

    private Path createOrCleanKycDirectory() {
        String generatedDirName = RandomStringUtils.randomAlphanumeric(5);
        String homeDir = System.getProperty("user.home");
        Path downloadDir = Paths.get(homeDir, "kyc-report-" + generatedDirName);

        try {
            Files.deleteIfExists(downloadDir);
            Files.createDirectories(downloadDir);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        return downloadDir;
    }
}

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.openqa.selenium.WebDriver;

import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class SeleniumAdapterTest {

    @Mock
    private SeleniumProperties seleniumProperties;

    @Mock
    private SeleniumChecksFactory seleniumChecksFactory;

    @Mock
    private WebDriverProvider webDriverProvider;

    @Mock
    private SeleniumChecks seleniumChecks;

    @Mock
    private WebDriver webDriver;

    @InjectMocks
    private SeleniumAdapter seleniumAdapter;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testPerformChecks() {
        String trigram = "TRG";
        Path downloadDir = mock(Path.class);
        when(seleniumProperties.getUrl(trigram)).thenReturn("http://example.com");
        when(webDriverProvider.getWebDriver(any(Path.class), eq(trigram))).thenReturn(webDriver);
        when(seleniumProperties.getAppName(trigram)).thenReturn("TestApp");
        when(seleniumChecksFactory.getSeleniumChecks("TestApp")).thenReturn(seleniumChecks);

        Map<String, String> expectedResponse = new HashMap<>();
        doAnswer(invocation -> {
            Map<String, String> response = invocation.getArgument(1);
            response.put("key", "value");
            return null;
        }).when(seleniumChecks).performSanityChecks(eq(webDriver), any(Map.class), eq(downloadDir));

        Map<String, String> actualResponse = seleniumAdapter.performChecks(trigram);

        assertEquals(expectedResponse, actualResponse);
        verify(webDriver).quit();
    }
}


