 Use UTF-8 Encoding with ASCII Transfer Mode

String content = Files.readString(Paths.get(localFilePath), StandardCharsets.UTF_8);
try (BufferedReader reader = new BufferedReader(new StringReader(content))) {
    sftpChannel.put(new InputStreamReader(reader, StandardCharsets.UTF_8), sftpRemoteDir + remoteFileName, ChannelSftp.OVERWRITE);
}



Use EBCDIC Encoding with Proper Translation


byte[] ebcdicContent = content.getBytes("Cp037"); // Cp037 is an EBCDIC code page
try (ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(ebcdicContent)) {
    sftpChannel.put(byteArrayInputStream, sftpRemoteDir + remoteFileName, ChannelSftp.OVERWRITE);
}


Transfer as Compressed (ZIP/GZIP) File:

try (FileInputStream fileInputStream = new FileInputStream(localZipFilePath)) {
    sftpChannel.put(fileInputStream, sftpRemoteDir + remoteZipFileName, ChannelSftp.OVERWRITE);
}



Transfer as Base64-Encoded XML:

byte[] encodedBytes = Base64.getEncoder().encode(Files.readAllBytes(Paths.get(localFilePath)));
try (ByteArrayInputStream inputStream = new ByteArrayInputStream(encodedBytes)) {
    sftpChannel.put(inputStream, sftpRemoteDir + remoteFileName, ChannelSftp.OVERWRITE);
}


Create the Fixed-Width Content:

String fixedWidthContent = prettifiedXml.lines()
    .map(line -> String.format("%-80s", line)) // Ensuring 80-char lines
    .collect(Collectors.joining("\n"));
Path tempFile = Files.createTempFile("fixedWidthXml", ".txt");
Files.write(tempFile, fixedWidthContent.getBytes(StandardCharsets.US_ASCII));
try (FileInputStream fileInputStream = new FileInputStream(tempFile.toFile())) {
    sftpChannel.put(fileInputStream, sftpRemoteDir + remoteFileName, ChannelSftp.OVERWRITE);
}


(Alternative) Direct Transfer Without Storing Locally

try (InputStream inputStream = new ByteArrayInputStream(fixedWidthContent.getBytes(StandardCharsets.US_ASCII))) {
    sftpChannel.put(inputStream, sftpRemoteDir + remoteFileName, ChannelSftp.OVERWRITE);
}



Way-6:

import java.io.*;
import java.nio.charset.StandardCharsets;
import com.jcraft.jsch.*;

public class FileTransfer {

    public void transferXmlFileToMainframe(String outputFilePath, String fileName, ChannelSftp channelSftp, Session session) {
        File tempFile = null;
        
        try (FileInputStream fis = new FileInputStream(outputFilePath);
             InputStreamReader reader = new InputStreamReader(fis, StandardCharsets.UTF_8);
             BufferedReader bufferedReader = new BufferedReader(reader)) {

            // Create a temporary file to hold the XML data
            tempFile = File.createTempFile(fileName, ".xml");

            // Writing to the temp file using BufferedWriter for performance
            try (FileWriter fileWriter = new FileWriter(tempFile, StandardCharsets.UTF_8);
                 BufferedWriter bufferedWriter = new BufferedWriter(fileWriter)) {

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    bufferedWriter.write(line);
                    bufferedWriter.newLine();  // More efficient line separator
                }
            }

            // Transfer the file via SFTP
            try (FileInputStream encodedFileInputStream = new FileInputStream(tempFile)) {
                channelSftp.put(encodedFileInputStream, fileName);
            } catch (SftpException e) {
                System.err.println("SFTP error during file upload: " + e.getMessage());
            }

        } catch (IOException e) {
            System.err.println("I/O error during file processing: " + e.getMessage());
        } finally {
            // Cleanup
            if (tempFile != null && tempFile.exists()) {
                if (!tempFile.delete()) {
                    System.err.println("Failed to delete temporary file: " + tempFile.getAbsolutePath());
                }
            }
            if (channelSftp != null) {
                channelSftp.disconnect();
            }
            if (session != null) {
                session.disconnect();
            }
        }
    }
}


import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;

public class SFTPTransfer {
    public static void main(String[] args) {
        String host = "your.sftp.server";
        String user = "your_username";
        String password = "your_password";
        String remoteDirectory = "/remote/path/";
        String localFilePath = "path/to/your/local/file.txt";
        String ebcdicFilePath = "path/to/your/ebcdic_file.txt";

        try {
            // Convert file to EBCDIC
            EncodingConverter.convertToEBCDIC(new File(localFilePath), new File(ebcdicFilePath));

            // Set up SFTP connection
            JSch jsch = new JSch();
            Session session = jsch.getSession(user, host, 22);
            session.setPassword(password);
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect();

            // Create an SFTP channel
            ChannelSftp channelSftp = (ChannelSftp) session.openChannel("sftp");
            channelSftp.connect();

            // Transfer the EBCDIC file
            channelSftp.put(ebcdicFilePath, remoteDirectory + "your_remote_file_name.txt");

            // Close the SFTP channel and session
            channelSftp.disconnect();
            session.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}




import java.io.*;
import java.nio.charset.Charset;
import java.nio.file.Files;

public class EncodingConverter {
    public static void convertToEBCDIC(File inputFile, File outputFile) throws IOException {
        try (BufferedReader reader = Files.newBufferedReader(inputFile.toPath(), Charset.forName("UTF-8"));
             BufferedWriter writer = Files.newBufferedWriter(outputFile.toPath(), Charset.forName("IBM1147"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                writer.write(line);
                writer.newLine();
            }
        }
    }
}


